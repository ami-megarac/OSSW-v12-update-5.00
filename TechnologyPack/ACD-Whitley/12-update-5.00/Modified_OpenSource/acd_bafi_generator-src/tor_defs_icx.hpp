/******************************************************************************
 *
 * INTEL CONFIDENTIAL
 *
 * Copyright 2021 Intel Corporation.
 *
 * This software and the related documents are Intel copyrighted materials, and
 * your use of them is governed by the express license under which they were
 * provided to you ("License"). Unless the License provides otherwise, you may
 * not use, modify, copy, publish, distribute, disclose or transmit this
 * software or the related documents without Intel's prior written permission.
 *
 * This software and the related documents are provided as is, with no express
 * or implied warranties, other than those that are expressly stated in
 * the License.
 *
 ******************************************************************************/

#pragma once
#include <array>
#include <map>
#include <utility>
#include <vector>

#include <tor_defs.hpp>

const std::array<const char*, 32> ICX_PORT_ID = {
    "UPI0",
    "UPI1",
    "UPI2",
    "not implemented",
    "IMC0",
    "IMC1",
    "IMC2",
    "IMC3",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "PCI0",
    "PCI1",
    "PCI2",
    "PCI3",
    "not implemented",
    "not implemented",
    "UBOX",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
};

const std::array<const char*, 16> ICX_LLCS = {
    "not implemented",
    "SF_S",
    "SF_E",
    "SF_H",
    "not implemented",
    "not implemented",
    "not implemented",
    "not implemented",
    "LLC_I",
    "LLC_S",
    "LLC_E",
    "LLC_M",
    "LLC_F",
    "LLC_D",
    "not implemented",
    "LLC_P",
};

const std::map<uint8_t, uint8_t> IcxfirstErrorCha = {
    {0x40, 0},  {0x41, 1},  {0x42, 2},  {0x43, 3},  {0x44, 4},
    {0x45, 5},  {0x46, 6},  {0x47, 7},  {0x48, 8},  {0x49, 9},
    {0x4a, 10}, {0x4b, 11}, {0x4c, 12}, {0x4d, 13}, {0x4e, 14},
    {0x4f, 15}, {0x50, 16}, {0x51, 17}, {0x52, 18}, {0x53, 19},
    {0x54, 20}, {0x55, 21}, {0x56, 22}, {0x57, 23}, {0x58, 24},
    {0x59, 25}, {0x5a, 26}, {0x5b, 27}, {0x5c, 28}, {0x5d, 29},
    {0x5e, 30}, {0x5f, 31}, {0x60, 32}, {0x61, 33}, {0x62, 34},
    {0x63, 35}, {0x64, 36}, {0x65, 37}
};

const std::map<uint16_t, const char*> IcxfirstError = {
    {0x00, "Core0, bank 0-3"},
    {0x01, "Core1, bank 0-3"},
    {0x02, "Core2, bank 0-3"},
    {0x03, "Core3, bank 0-3"},
    {0x04, "Core4, bank 0-3"},
    {0x05, "Core5, bank 0-3"},
    {0x06, "Core6, bank 0-3"},
    {0x07, "Core7, bank 0-3"},
    {0x08, "Core8, bank 0-3"},
    {0x09, "Core9, bank 0-3"},
    {0x0a, "Core10, bank 0-3"},
    {0x0b, "Core11, bank 0-3"},
    {0x0c, "Core12, bank 0-3"},
    {0x0d, "Core13, bank 0-3"},
    {0x0e, "Core14, bank 0-3"},
    {0x0f, "Core15, bank 0-3"},
    {0x10, "Core16, bank 0-3"},
    {0x11, "Core17, bank 0-3"},
    {0x12, "Core18, bank 0-3"},
    {0x13, "Core19, bank 0-3"},
    {0x14, "Core20, bank 0-3"},
    {0x15, "Core21, bank 0-3"},
    {0x16, "Core22, bank 0-3"},
    {0x17, "Core23, bank 0-3"},
    {0x18, "Core24, bank 0-3"},
    {0x19, "Core25, bank 0-3"},
    {0x1a, "Core26, bank 0-3"},
    {0x1b, "Core27, bank 0-3"},
    {0x1c, "Core28, bank 0-3"},
    {0x1d, "Core29, bank 0-3"},
    {0x1e, "Core30, bank 0-3"},
    {0x1f, "Core31, bank 0-3"},
    {0x20, "Core32, bank 0-3"},
    {0x21, "Core33, bank 0-3"},
    {0x22, "Core34, bank 0-3"},
    {0x23, "Core35, bank 0-3"},
    {0x24, "Core36, bank 0-3"},
    {0x25, "Core37, bank 0-3"},
    {0x30, "Chassis_Punit_FSM, bank 4"},
    {0x31, "Chassis_Punit_FSM2, bank 4"},
    {0x32, "Chassis_Punit_CR, bank 4"},
    {0x40, "CHA0, bank 9"},
    {0x41, "CHA1, bank 10"},
    {0x42, "CHA2, bank 11"},
    {0x43, "CHA3, bank 9"},
    {0x44, "CHA4, bank 10"},
    {0x45, "CHA5, bank 11"},
    {0x46, "CHA6, bank 9"},
    {0x47, "CHA7, bank 10"},
    {0x48, "CHA8, bank 11"},
    {0x49, "CHA9, bank 9"},
    {0x4a, "CHA10, bank 10"},
    {0x4b, "CHA11, bank 11"},
    {0x4c, "CHA12, bank 9"},
    {0x4d, "CHA13, bank 10"},
    {0x4e, "CHA14, bank 11"},
    {0x4f, "CHA15, bank 9"},
    {0x50, "CHA16, bank 10"},
    {0x51, "CHA17, bank 11"},
    {0x52, "CHA18, bank 9"},
    {0x53, "CHA19, bank 10"},
    {0x54, "CHA20, bank 11"},
    {0x55, "CHA21, bank 9"},
    {0x56, "CHA22, bank 10"},
    {0x57, "CHA23, bank 11"},
    {0x58, "CHA24, bank 9"},
    {0x59, "CHA25, bank 10"},
    {0x5a, "CHA26, bank 11"},
    {0x5b, "CHA27, bank 9"},
    {0x5c, "CHA28, bank 10"},
    {0x5d, "CHA29, bank 11"},
    {0x5e, "CHA30, bank 9"},
    {0x5f, "CHA31, bank 10"},
    {0x60, "CHA32, bank 11"},
    {0x61, "CHA33, bank 9"},
    {0x62, "CHA34, bank 10"},
    {0x63, "CHA35, bank 11"},
    {0x64, "CHA36, bank 9"},
    {0x65, "CHA37, bank 10"},
    {0x6d, "Intel UPI 0, bank 5"},
    {0x6e, "Intel UPI 1, bank 7"},
    {0x6f, "Intel UPI 2, bank 8"},
    {0x80, "IMC 0 - CH0-CH1, bank 13, 14"},
    {0x81, "IMC 1 - CH0-CH1, bank 17, 18"},
    {0x82, "IMC 2 - CH0-CH1, bank 21, 22"},
    {0x83, "IMC 3 - CH0-CH1, bank 25, 26"},
    {0x86, "M2MEM 0, bank 12"},
    {0x87, "M2MEM 1, bank 16"},
    {0x88, "M2MEM 2, bank 20"},
    {0x89, "M2MEM 3, bank 24"},
    {0xc7, "Global IEH/UBOX (IOMCA), bank 6"}
};

const std::map<uint32_t, const char*> IcxOpCodeDecode = {
    {0x107, "PRd"},
    {0x111, "CRd_Pref"},
    {0x13c, "CLCleanse"},
    {0x1d8, "EOI"},
    {0x199, "PrefCode"},
    {0x114, "DRd_Opt_Pref"},
    {0x189, "ItoMWr"},
    {0x1d0, "NOP"},
    {0x19d, "MemPushWr_NS"},
    {0x148, "LLCInv"},
    {0x1a8, "ItoMCacheNear"},
    {0x116, "WCiLF_NS"},
    {0x118, "CLFlush"},
    {0x108, "Enqueue"},
    {0x103, "SetMonitor"},
    {0x19a, "PrefData"},
    {0x1da, "IntPhy"},
    {0x10e, "UCRdF"},
    {0x110, "RFO_Pref"},
    {0x185, "WbMtoE"},
    {0x181, "ItoMWr_NS"},
    {0x1de, "SplitLock"},
    {0x14b, "LLCWB"},
    {0x101, "CRd"},
    {0x18c, "WbStoI"},
    {0x198, "PrefRFO"},
    {0x1a4, "WbPushHint"},
    {0x11a, "CLFlush_Opt"},
    {0x102, "DRd"},
    {0x184, "WbMtoI"},
    {0x115, "WCiL_NS"},
    {0x104, "DRd_Opt"},
    {0x1d4, "IntA"},
    {0x113, "DRd_NS"},
    {0x109, "PCommit"},
    {0x1a9, "RdCurrCacheNear"},
    {0x10f, "WiL"},
    {0x11c, "CLWB"},
    {0x149, "LLCWBInv"},
    {0x1dc, "PortIn"},
    {0x1db, "IntPriUp"},
    {0x18d, "MemPushWr"},
    {0x100, "RFO"},
    {0x180, "CLDemote"},
    {0x1df, "Lock"},
    {0x1d5, "PortOut"},
    {0x195, "WbOtoE"},
    {0x11e, "RdCurr"},
    {0x187, "WbEFtoE"},
    {0x1d1, "ClrMonitor"},
    {0x11f, "RFOWr"},
    {0x194, "WbOtoI"},
    {0x18a, "SpecItoM"},
    {0x188, "ItoM"},
    {0x197, "ItoMWR_WT_NS"},
    {0x1d3, "Unlock"},
    {0x18b, "ItoMWr_WT"},
    {0x10c, "WCiLF"},
    {0x1c0, "SpCyc"},
    {0x112, "DRd_Pref"},
    {0x186, "WbEFtoI"},
    {0x10d, "WCiL"},
    {0x105, "CRd_UC"},
    {0x1d9, "IntLog"},
    {0x106, "DRdPTE"},
    {0x50d, "RSVD13"},
    {0x50a, "RSVD10"},
    {0x50b, "RSVD11"},
    {0x505, "InvXtoI"},
    {0x503, "RdDataMig"},
    {0x50f, "InvItoM"},
    {0x500, "RdCur"},
    {0x50c, "RdInv"},
    {0x50e, "RSVD14"},
    {0x508, "RSVD8"},
    {0x509, "RSVD9"},
    {0x502, "RdData"},
    {0x504, "RdInvOwn"},
    {0x506, "PushHint"},
    {0x507, "InvItoE"},
    {0x501, "RdCode"},
    {0x40a, "RSVD10"},
    {0x40e, "RSVD14"},
    {0x40b, "WbFlush"},
    {0x40c, "EvctCln"},
    {0x406, "WbMtoEPtl"},
    {0x40d, "NonSnpRd"},
    {0x403, "NonSnpWr"},
    {0x401, "WbMtoS"},
    {0x409, "RSVD9"},
    {0x408, "WbPushMtoI"},
    {0x404, "WbMtoIPtl"},
    {0x402, "WbMtoE"},
    {0x407, "NonSnpWrPtl"},
    {0x405, "RSVD5"},
    {0x400, "WbMtoI"},
    {0x70e, "RSVD14"},
    {0x70d, "SnpFInv"},
    {0x702, "SnpData"},
    {0x704, "SnpInvOwn"},
    {0x70b, "SnpFDataMig"},
    {0x700, "SnpCur"},
    {0x70a, "SnpFData"},
    {0x701, "SnpCode"},
    {0x703, "SnpDataMig"},
    {0x70c, "SnpFInvOwn"},
    {0x709, "SnpFCode"},
    {0x708, "SnpFCur"},
    {0x705, "SnpInv"},
    {0x706, "RSVD6"},
    {0x707, "RSVD7"},
    {0x14, "GNTE_CMP_RSPI"},
    {0x18, "GNTE_CMP_RSPI_PULLDATA"},
    {0x9, "CMP_PULLDATA"},
    {0x33, "RSPIFWDMPTL"},
    {0x1d, "GSRISINMSTATE"},
    {0x23, "RSPIFWDFE"},
    {0x5, "PULLDATABOGUS"},
    {0x20, "DATAC"},
    {0x1b, "VICTIM"},
    {0x1e, "DATANC"},
    {0x27, "RSPVFWDV"},
    {0x34, "PULLDATAPTL"},
    {0x26, "RSPV"},
    {0x6, "CMP"},
    {0xb, "CMP_FWDINVOWN"},
    {0x7, "CMP_FWDCODE"},
    {0x30, "TOR_TIMEOUT"},
    {0x3, "RSPIFWDM"},
    {0x1, "RSPS"},
    {0xc, "DATAC_CMP"},
    {0x32, "RSPNACK"},
    {0x8, "CMP_FWDINVITOE"},
    {0xd, "DATAC_CMP_RSPI"},
    {0x0, "RSPI"},
    {0x4, "PULLDATA"},
    {0x10, "FAKECYCLE"},
    {0x25, "FWDCNFLT"},
    {0x2, "RSPDATAM"},
    {0x24, "RSPSFWDFE"},
    {0x31, "LLCVICTIM"},
    {0x17, "GNTE_CMP_PULLDATA"},
    {0x13, "GNTE_CMP"}
};

union PackageThermStatus
{
    struct
    {
        uint32_t thermal_monitor_status : 1, thermal_monitor_log : 1,
            prochot_status : 1, prochot_log : 1, out_of_spec_status: 1,
            out_of_spec_log: 1, threshold1_status: 1, threshold1_log: 1,
            threshold2_status: 1, threshold2_log: 1, power_limitation_status: 1,
            power_limitation_log: 1, pmax_status: 1, pmax_log: 1, reserved1: 2,
            temperature: 7, reserved2: 3, hw_feedback_notification_log: 1,
            resolution: 4, valid: 1;
    };
    uint32_t package_therm_status;
};