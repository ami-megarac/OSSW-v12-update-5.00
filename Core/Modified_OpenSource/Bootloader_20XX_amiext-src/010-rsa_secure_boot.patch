diff -Naur u-boot-2019.04/include/u-boot/rsa.h u-boot.new/include/u-boot/rsa.h
--- u-boot-2019.04/include/u-boot/rsa.h	2019-07-23 08:27:54.000000000 +0530
+++ u-boot.new/include/u-boot/rsa.h	2020-01-02 16:10:48.146290303 +0530
@@ -144,4 +144,5 @@
 /* This is the maximum signature length that we support, in bits */
 #define RSA_MAX_SIG_BITS	4096
 
+int rsa_get_pub_key_uboot_verify(const char *key_val, unsigned char *enc_hash, unsigned int enc_hash_len, unsigned char *hash, unsigned int hash_len);
 #endif
diff -Naur u-boot-2019.04/lib/rsa/rsa-mod-exp.c u-boot.new/lib/rsa/rsa-mod-exp.c
--- u-boot-2019.04/lib/rsa/rsa-mod-exp.c	2019-07-23 08:27:54.000000000 +0530
+++ u-boot.new/lib/rsa/rsa-mod-exp.c	2020-01-02 15:12:28.985847900 +0530
@@ -24,9 +24,44 @@
 #define get_unaligned_be32(a) fdt32_to_cpu(*(uint32_t *)a)
 #define put_unaligned_be32(a, b) (*(uint32_t *)(b) = cpu_to_fdt32(a))
 
+#define RSA2048_BYTES	(2048 / 8)
+
 /* Default public exponent for backward compatibility */
 #define RSA_DEFAULT_PUBEXP	65537
 
+
+static const uint8_t padding_sha256_rsa2048[RSA2048_BYTES - SHA256_SUM_LEN] = {
+        0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+        0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0x31, 0x30,
+        0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65,
+        0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20
+};
+
+
 /**
  * subtract_modulus() - subtract modulus from the given value
  *
@@ -129,6 +164,7 @@
  * @key:	RSA key
  * @num_bits:	Storage for the number of public exponent bits
  */
+ /*
 static int num_public_exponent_bits(const struct rsa_public_key *key,
 		int *num_bits)
 {
@@ -151,7 +187,7 @@
 		}
 
 	return -EINVAL;
-}
+}*/
 
 /**
  * is_public_exponent_bit_set() - Check if a bit in the public exponent is set
@@ -159,11 +195,12 @@
  * @key:	RSA key
  * @pos:	The bit position to check
  */
+ /*
 static int is_public_exponent_bit_set(const struct rsa_public_key *key,
 		int pos)
 {
 	return key->exponent & (1ULL << pos);
-}
+}*/
 
 /**
  * pow_mod() - in-place public exponentiation
@@ -175,7 +212,6 @@
 {
 	uint32_t *result, *ptr;
 	uint i;
-	int j, k;
 
 	/* Sanity check for stack size - key->len is in 32-bit words */
 	if (key->len > RSA_MAX_KEY_BITS / 32) {
@@ -185,48 +221,18 @@
 	}
 
 	uint32_t val[key->len], acc[key->len], tmp[key->len];
-	uint32_t a_scaled[key->len];
 	result = tmp;  /* Re-use location. */
 
 	/* Convert from big endian byte array to little endian word array. */
 	for (i = 0, ptr = inout + key->len - 1; i < key->len; i++, ptr--)
 		val[i] = get_unaligned_be32(ptr);
 
-	if (0 != num_public_exponent_bits(key, &k))
-		return -EINVAL;
-
-	if (k < 2) {
-		debug("Public exponent is too short (%d bits, minimum 2)\n",
-		      k);
-		return -EINVAL;
-	}
-
-	if (!is_public_exponent_bit_set(key, 0)) {
-		debug("LSB of RSA public exponent must be set.\n");
-		return -EINVAL;
+	montgomery_mul(key, acc, val, key->rr);  /* axx = a * RR / R mod M */
+	for (i = 0; i < 16; i += 2) {
+		montgomery_mul(key, tmp, acc, acc); /* tmp = acc^2 / R mod M */
+		montgomery_mul(key, acc, tmp, tmp); /* acc = tmp^2 / R mod M */
 	}
-
-	/* the bit at e[k-1] is 1 by definition, so start with: C := M */
-	montgomery_mul(key, acc, val, key->rr); /* acc = a * RR / R mod n */
-	/* retain scaled version for intermediate use */
-	memcpy(a_scaled, acc, key->len * sizeof(a_scaled[0]));
-
-	for (j = k - 2; j > 0; --j) {
-		montgomery_mul(key, tmp, acc, acc); /* tmp = acc^2 / R mod n */
-
-		if (is_public_exponent_bit_set(key, j)) {
-			/* acc = tmp * val / R mod n */
-			montgomery_mul(key, acc, tmp, a_scaled);
-		} else {
-			/* e[j] == 0, copy tmp back to acc for next operation */
-			memcpy(acc, tmp, key->len * sizeof(acc[0]));
-		}
-	}
-
-	/* the bit at e[0] is always 1 */
-	montgomery_mul(key, tmp, acc, acc); /* tmp = acc^2 / R mod n */
-	montgomery_mul(key, acc, tmp, val); /* acc = tmp * a / R mod M */
-	memcpy(result, acc, key->len * sizeof(result[0]));
+	montgomery_mul(key, result, acc, val);  /* result = XX * a / R mod M */
 
 	/* Make sure result < mod; result is at most 1x mod too large. */
 	if (greater_equal_modulus(key, result))
@@ -235,6 +241,7 @@
 	/* Convert to bigendian byte array */
 	for (i = key->len - 1, ptr = inout; (int)i >= 0; i--, ptr++)
 		put_unaligned_be32(result[i], ptr);
+
 	return 0;
 }
 
@@ -301,6 +308,114 @@
 	return 0;
 }
 
+static int read_prop(const char *key_val, int offset, int size){
+        int t=0;
+        int val = 0;
+        int tmp =0;
+        int count = size;
+        for(t = size+offset-1; t >= offset; t--){
+                tmp = key_val[t];
+                val = val + (tmp << ((--count)*8));
+        }
+        return val;
+}
+
+static int rsa_verify_key_SHA256(const struct rsa_public_key *key, const uint8_t *sig,
+                                                 const uint32_t sig_len, const uint8_t *hash, const uint32_t hash_len)
+{
+        const uint8_t *padding;
+        int pad_len;
+        int ret;
+        if (!key || !sig || !hash)
+                return -EIO;
+
+        if (sig_len != (key->len * sizeof(uint32_t))) {
+                printf("Signature is of incorrect length %d\n", sig_len);
+                return -EINVAL;
+        }
+
+        /* Sanity check for stack size */
+        if (sig_len > RSA_MAX_SIG_BITS / 8) {
+                printf("Signature length %u exceeds maximum %d\n", sig_len,
+                      RSA_MAX_SIG_BITS / 8);
+                return -EINVAL;
+        }
+
+        uint32_t buf[sig_len / sizeof(uint32_t)];
+
+        memcpy(buf, sig, sig_len);
+
+        ret = pow_mod(key, buf);
+        if (ret){
+                printf("error in pow_mod in rsa_verify_key\n");
+                return ret;
+        }
+        
+        padding = padding_sha256_rsa2048;
+        pad_len = RSA2048_BYTES - SHA256_SUM_LEN;
+
+        /* Check pkcs1.5 padding bytes. */
+        if (memcmp(buf, padding, pad_len)) {
+                printf("In RSAVerify(): Padding check failed!\n");
+              return -EINVAL;
+        }
+
+        /* Check hash. */
+        if (memcmp((uint8_t *)buf + pad_len, hash, sig_len - pad_len)) {
+                printf("In RSAVerify(): Hash check failed!\n");
+                return -EACCES;
+        }
+        return 0;
+}
+
+int rsa_get_pub_key_uboot_verify(const char *key_val, unsigned char *enc_hash,
+                                                  unsigned int enc_hash_len, unsigned char *hash, unsigned int hash_len)
+{
+        struct rsa_public_key key;
+        const void *modulus, *rr;
+        uint32_t hash_copy[16]={0};  
+        int ret, p;
+        
+        key.len = read_prop(key_val, 256, 2);
+        key.n0inv = read_prop(key_val, 100, 4);
+        modulus = &key_val[512]; 
+        rr = &key_val[1024]; 
+
+        /* Sanity check for stack size */
+        if (key.len > RSA_MAX_KEY_BITS || key.len < RSA_MIN_KEY_BITS) {
+                debug("RSA key bits %u outside allowed range %d..%d\n",
+                      key.len, RSA_MIN_KEY_BITS, RSA_MAX_KEY_BITS);
+                return -EFAULT;
+        }
+
+        key.len /= sizeof(uint32_t) * 8;
+        uint32_t key1[key.len], key2[key.len];
+        key.modulus = key1;
+        key.rr = key2;
+        rsa_convert_big_endian(key.modulus, modulus, key.len);
+        rsa_convert_big_endian(key.rr, rr, key.len);
+
+        if (!key.modulus || !key.rr) {
+                debug("%s: Out of memory", __func__);
+                return -ENOMEM;
+        }
+
+        debug("key length %d\n", key.len);
+
+        for(p=0; p < hash_len/sizeof(uint32_t); p++)
+        {
+                hash_copy[p] = *(((uint32_t *)(hash))+p);
+        }
+
+        ret = rsa_verify_key_SHA256(&key, enc_hash, enc_hash_len, (uint8_t *)(hash_copy), hash_len);
+
+        if (ret) {
+                printf("%s: RSA failed to verify: %d\n", __func__, ret);
+                return ret;
+        }
+        return 0;
+}
+
 #if defined(CONFIG_CMD_ZYNQ_RSA)
 /**
  * zynq_pow_mod - in-place public exponentiation
diff -Naur u-boot-2019.04/oem/ami/fmh/hrotcore.c u-boot.new/oem/ami/fmh/hrotcore.c
--- u-boot-2019.04/oem/ami/fmh/hrotcore.c	1970-01-01 05:30:00.000000000 +0530
+++ u-boot.new/oem/ami/fmh/hrotcore.c	2020-01-08 10:24:03.920790119 +0530
@@ -0,0 +1,187 @@
+# include <common.h>
+# include <config.h>
+# include <command.h>
+# include <flash.h>
+# include "cmd.h"
+# include <oem/ami/fmh/fmh.h>
+# include "hrot_ifc.h"
+#include "u-boot/sha256.h"
+#include "u-boot/rsa.h"
+
+#ifdef CONFIG_SPX_FEATURE_UBOOT_VALIDATE_SUPPORT
+	#define UBOOT_VALIDATE		1
+#else
+	#define UBOOT_VALIDATE          0
+#endif
+#define PROD_SIG_OFFSET		4096
+#define SIG_OFFSET		4088
+#define SIZE_OF_UBOOT_FMH	256
+#define SIGNATURE_LENGTH	256
+#define KEY_INFO_LENGTH		4096
+#define HASH_BLK_SIZE           262144
+
+static sha256_context ctx;
+static UINT32 boot_fmh_location,product_info_offset=0;
+static char placeToHash[HASH_BLK_SIZE];
+
+void
+hrot_start(){
+	sha256_starts(&ctx);
+	return;
+}
+
+int
+hrot_update(unsigned short ModType, void *ModName, UINT32 location, UINT32 AllocSize, UINT32 fmhLocation, unsigned long startaddress){
+
+	int hs_size=HASH_BLK_SIZE;
+	UINT32 stopHash;
+        unsigned char *hash_data;
+        int rc = 0;
+	UINT32 hash_start, size_to_hash;
+	struct spi_flash *flash;
+
+	if((ModType == MODULE_BOOTLOADER) && (strncmp((char *)ModName,"boot",sizeof("boot")) == 0)){
+		boot_fmh_location = fmhLocation;
+	}
+	flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
+                        CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
+    if (flash == NULL) 
+    {
+        puts("\nspi_flash_probe failed");
+        hang();
+    }
+
+	if((ModType != MODULE_JFFS2 && ModType != MODULE_BOOTLOADER) || (UBOOT_VALIDATE && ModType == MODULE_BOOTLOADER)){
+
+		if(ModType != MODULE_BOOTLOADER && ModType != MODULE_FMH_FIRMWARE){
+                        hash_start = startaddress + fmhLocation;
+                        size_to_hash = AllocSize;
+                }
+                else if(ModType == MODULE_FMH_FIRMWARE){
+                        hash_start = startaddress + fmhLocation;
+                        size_to_hash = AllocSize - (3*PROD_SIG_OFFSET+1024);
+			product_info_offset=startaddress + fmhLocation +AllocSize;
+                }
+                else{
+                        hash_start = startaddress + location;
+                	size_to_hash = fmhLocation + SIZE_OF_UBOOT_FMH - PROD_SIG_OFFSET;
+                }
+
+		stopHash = (size_to_hash+hash_start);
+                while(hash_start < stopHash)
+                {
+                        if((hash_start+hs_size) > stopHash && hash_start < stopHash){
+                                hs_size = stopHash - hash_start;
+                        }
+
+						spi_flash_read(flash,hash_start, hs_size, placeToHash);
+                        hash_data = (rc == ERR_OK) ? (unsigned char*)placeToHash : NULL;
+
+                        if(hash_data == NULL){
+                                printf("ERROR setting hash data!\n");
+                                return 1;
+                        }
+						
+						if ((ModType == MODULE_FMH_FIRMWARE) && (hash_start == (startaddress + fmhLocation)))
+						{
+							// Start with FmhLocation + 0x17 offset exclude 1 Byte FMH_Header_Checksum
+							memset(&hash_data[23], 0, 1);
+							// Start with FmhLocation + 0x32 offset exclude 4 Byte Module_Checksum
+							memset(&hash_data[50], 0, 4);
+						}
+
+                        sha256_update(&ctx, hash_data, hs_size);
+                        hash_start += hs_size;
+                }
+
+	}
+        return 0;
+}
+
+
+#define START_IDENTIFIER "$start$"
+#define FWIMG_IDENTIFIER "$fwimg$"
+#define END_IDENTIFIER   "$end$"
+
+int
+hrot_finish(unsigned long startaddress){
+        unsigned char output [65];
+        UINT32 keyInfo = startaddress + boot_fmh_location - KEY_INFO_LENGTH;
+        UINT32 sigaddr = product_info_offset  - PROD_SIG_OFFSET;
+        int rc = 0;
+        int size = 64;
+        char    linebuf[16384] = {0}, linebuf1[1024] = {0};
+        void *buf=NULL, *buf1=NULL;
+        int ret =0;
+		int sig_length;
+		char identifier[8];
+		struct spi_flash *flash;
+	
+		flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
+							CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
+		if (flash == NULL) 
+		{
+			puts("\nspi_flash_probe failed");
+			hang();
+		}
+        sha256_finish(&ctx, output);
+
+
+	   rc = spi_flash_read(flash,keyInfo, KEY_INFO_LENGTH*4, linebuf);
+        buf = (rc == ERR_OK) ? linebuf : (void*)keyInfo;
+
+		spi_flash_read(flash,sigaddr,sizeof(START_IDENTIFIER),identifier);
+		if(strncmp(identifier,START_IDENTIFIER,sizeof(START_IDENTIFIER)) != 0)
+		{
+			printf("unable to find signature start identifier :( \n");
+			return -1;
+		}
+	
+		sigaddr +=sizeof(START_IDENTIFIER);
+		/* scan through hash area and find the proper hash for firmware image*/
+		while(product_info_offset > sigaddr )
+		{
+			spi_flash_read(flash,sigaddr,sizeof(identifier),identifier);
+
+			sigaddr +=sizeof(identifier);
+				
+			if(strncmp(identifier,FWIMG_IDENTIFIER,sizeof(FWIMG_IDENTIFIER)) != 0)
+			{
+				if(strncmp(identifier,END_IDENTIFIER,strlen(END_IDENTIFIER)) != 0)
+				{
+					printf("unable to find signature for firmware image");
+					return -1;
+				}
+				spi_flash_read(flash,sigaddr,sizeof(sig_length),(char *) &sig_length);
+				sigaddr +=sizeof(sig_length)+sig_length;
+
+				continue;
+
+			}
+
+			spi_flash_read(flash,sigaddr,sizeof(sig_length),(char *) &sig_length);
+            sigaddr +=sizeof(sig_length);
+
+			rc = spi_flash_read(flash,sigaddr, sig_length, linebuf1);
+			buf1 = (rc == ERR_OK) ? linebuf1 : (void*)sigaddr;
+			break;
+
+		}
+		if(product_info_offset < sigaddr)
+		{
+			printf("signature not found :(");
+			return -1;
+		}
+
+        char *key_data = (char *)buf;
+        unsigned char *sig = (unsigned char *)buf1;
+        
+        if(0){
+                printf("%s", key_data);
+                printf("%s", sig);
+        }
+        ret = rsa_get_pub_key_uboot_verify(key_data, sig, sig_length, output, size);
+        return ret;
+}
+
+
diff -Naur u-boot-2019.04/oem/ami/fmh/hrot_ifc.h u-boot.new/oem/ami/fmh/hrot_ifc.h
--- u-boot-2019.04/oem/ami/fmh/hrot_ifc.h	1970-01-01 05:30:00.000000000 +0530
+++ u-boot.new/oem/ami/fmh/hrot_ifc.h	2019-12-31 15:21:52.126764500 +0530
@@ -0,0 +1,11 @@
+#ifndef __AMI_CMD_SECURE_BOOT_H__
+#define __AMI_CMD_SECURE_BOOT_H__
+
+
+typedef unsigned long   UINT32;
+void hrot_start(void);
+int hrot_update(unsigned short ModType, void *ModName, UINT32 location, UINT32 ModSize, UINT32 fmhLocation, unsigned long startaddress);
+int hrot_finish(unsigned long startaddress);
+extern int rsa_get_pub_key_uboot_verify(const char *key_val, unsigned char *enc_hash, unsigned int enc_hash_len, unsigned char *hash, unsigned int hash_len);
+
+#endif
