diff -Naur uboot/cmd/i2c.c uboot.new/cmd/i2c.c
--- uboot/cmd/i2c.c	2020-04-14 11:30:10.388174772 +0530
+++ uboot.new/cmd/i2c.c	2020-04-14 14:00:23.080273029 +0530
@@ -129,9 +129,9 @@
 #endif
 
 #ifdef CONFIG_DM_I2C
-static struct udevice *i2c_cur_bus;
+struct udevice *i2c_cur_bus;
 
-static int cmd_i2c_set_bus_num(unsigned int busnum)
+int cmd_i2c_set_bus_num(unsigned int busnum)
 {
 	struct udevice *bus;
 	int ret;
@@ -167,7 +167,7 @@
 	return 0;
 }
 
-static int i2c_get_cur_bus_chip(uint chip_addr, struct udevice **devp)
+int i2c_get_cur_bus_chip(uint chip_addr, struct udevice **devp)
 {
 	struct udevice *bus;
 	int ret;
diff -Naur uboot/include/net.h uboot.new/include/net.h
--- uboot/include/net.h	2020-04-14 11:30:10.360174562 +0530
+++ uboot.new/include/net.h	2020-04-14 13:59:08.587691114 +0530
@@ -856,7 +856,9 @@
 
 /* get a random source port */
 unsigned int random_port(void);
-
+#ifdef CONFIG_SPX_FEATURE_WRITE_MAC_TO_EEPROM_SUPPORT
+	void ast_eth_read_addr_from_eeprom(int id);
+#endif
 /**
  * update_tftp - Update firmware over TFTP (via DFU)
  *
diff -Naur uboot/net/eth-uclass.c uboot.new/net/eth-uclass.c
--- uboot/net/eth-uclass.c	2020-04-14 11:30:10.256173781 +0530
+++ uboot.new/net/eth-uclass.c	2020-04-14 12:56:06.110958736 +0530
@@ -497,7 +497,9 @@
 	/* Check if the device has a MAC address in ROM */
 	if (eth_get_ops(dev)->read_rom_hwaddr)
 		eth_get_ops(dev)->read_rom_hwaddr(dev);
-
+#ifdef CONFIG_SPX_FEATURE_WRITE_MAC_TO_EEPROM_SUPPORT
+	ast_eth_read_addr_from_eeprom(dev->seq);
+#endif
 	eth_env_get_enetaddr_by_index("eth", dev->seq, env_enetaddr);
 	if (!is_zero_ethaddr(env_enetaddr)) {
 		if (!is_zero_ethaddr(pdata->enetaddr) &&
diff -Naur uboot/oem/ami/mac_eeprom/macto_eeprom.c uboot.new/oem/ami/mac_eeprom/macto_eeprom.c
--- uboot/oem/ami/mac_eeprom/macto_eeprom.c	1970-01-01 05:30:00.000000000 +0530
+++ uboot.new/oem/ami/mac_eeprom/macto_eeprom.c	2020-04-14 14:12:24.377903976 +0530
@@ -0,0 +1,107 @@
+#include <common.h>
+#include <dm.h>
+#include <environment.h>
+#include <net.h>
+#include <dm/device-internal.h>
+#include <dm/uclass-internal.h>
+//#include "eth_internal.h"
+#include <i2c.h>
+
+
+
+#ifdef CONFIG_SPX_FEATURE_WRITE_MAC_TO_EEPROM_SUPPORT
+extern struct udevice *i2c_cur_bus;
+extern int cmd_i2c_set_bus_num(unsigned int busnum);
+extern int i2c_get_cur_bus_chip(uint chip_addr, struct udevice **devp);
+
+static int set_i2c_bus_num(int	bus_no)
+{
+	int		ret = 0;
+
+//		printf("Setting bus to %d\n", bus_no);
+#ifdef CONFIG_DM_I2C
+		ret = cmd_i2c_set_bus_num(bus_no);
+
+#endif
+		if (ret)
+		{
+			printf("Failure changing bus number (%d)\n", ret);
+			return -1;
+		}
+
+	return 0;
+}
+
+void ast_eth_read_addr_from_eeprom(int id)
+{
+	unsigned char mac_address[ETH_ALEN] = {0};
+	char ethaddr_env[24];
+	int valid_mac_addr_in_eeprom;
+	struct udevice *dev;
+	int ret=-1;
+	int i=0;
+	if(set_i2c_bus_num(CONFIG_SPX_FEATURE_I2C_EEPROM_CHANNEL_ID) == 0)
+	{
+		ret = i2c_get_cur_bus_chip(CONFIG_SPX_FEATURE_I2C_EEPROM_ADDR, &dev);
+		if (!ret )
+		{
+			ret = i2c_set_chip_offset_len(dev, CONFIG_SPX_FEATURE_I2C_EEPROM_ADDR_LEN);
+		}
+#ifdef CONFIG_SPX_FEATURE_I2C_EEPROM_MACADDR_OFFSET
+		if(id==0)
+		{
+			if (!ret)
+			{
+				ret = dm_i2c_read(dev, CONFIG_SPX_FEATURE_I2C_EEPROM_MACADDR_OFFSET, mac_address, 6);
+			}
+		}
+#endif
+#ifdef CONFIG_SPX_FEATURE_I2C_EEPROM_MAC1ADDR_OFFSET
+		if(id==1)
+		{
+			if (!ret)
+			{
+				ret = dm_i2c_read(dev, CONFIG_SPX_FEATURE_I2C_EEPROM_MAC1ADDR_OFFSET, mac_address, 6);
+			}
+		}
+#endif
+	
+		valid_mac_addr_in_eeprom = 0;
+		/* Even if one index of mac address is non-zero and non-FF, it is valid */
+		for (i = 0; i < ETH_ALEN; i ++) {
+			if ((mac_address[i] != 0xFF) && (mac_address[i] != 0x00)) {
+				valid_mac_addr_in_eeprom = 1;
+			}
+		}
+	
+#ifdef CONFIG_SPX_FEATURE_I2C_EEPROM_MACADDR_OFFSET
+		if(valid_mac_addr_in_eeprom)
+		{
+			
+			sprintf(ethaddr_env, "%0X:%0X:%0X:%0X:%0X:%0X",mac_address[0], mac_address[1], mac_address[2], mac_address[3], mac_address[4], 			mac_address[5]); 
+	//:		printf("\nethaddr set to: %s\n", ethaddr_env);
+			if (id == 0) {
+				env_set("ethaddr", ethaddr_env);
+			}
+		}
+#endif
+
+#ifdef CONFIG_SPX_FEATURE_I2C_EEPROM_MAC1ADDR_OFFSET
+		if(valid_mac_addr_in_eeprom)
+		{
+			
+			sprintf(ethaddr_env, "%0X:%0X:%0X:%0X:%0X:%0X",mac_address[0], mac_address[1], mac_address[2], mac_address[3], mac_address[4], 			mac_address[5]); 
+//			printf("\nethaddr set to: %s\n", ethaddr_env);
+			if (id == 1) {
+				env_set("eth1addr", ethaddr_env);
+			}
+		}
+#endif
+	}else
+	{
+		printf("unable to set bus number\n");
+	}
+}
+
+
+#endif
diff -Naur uboot/oem/ami/mac_eeprom/Makefile uboot.new/oem/ami/mac_eeprom/Makefile
--- uboot/oem/ami/mac_eeprom/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ uboot.new/oem/ami/mac_eeprom/Makefile	2020-04-14 11:29:18.059782441 +0530
@@ -0,0 +1,21 @@
+# (C) Copyright 2013 
+# American Megatrends Inc
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+
+obj-y	+= macto_eeprom.o
diff -Naur uboot/oem/Makefile uboot.new/oem/Makefile
--- uboot/oem/Makefile	2020-04-14 11:30:10.728177320 +0530
+++ uboot.new/oem/Makefile	2020-04-14 11:31:45.748889534 +0530
@@ -15,3 +15,6 @@
 ifeq ($(CONFIG_SPX_FEATURE_GLOBAL_FRAME_BUFFER_SUPPORT),"YES")
 obj-y += ami/bootlogo/
 endif
+ifeq ($(CONFIG_SPX_FEATURE_WRITE_MAC_TO_EEPROM_SUPPORT),"YES")
+obj-y += ami/mac_eeprom/
+endif
