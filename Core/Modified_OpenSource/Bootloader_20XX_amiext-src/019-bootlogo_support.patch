diff -Naur uboot/arch/arm/dts/ast2500.dtsi u-boot.new/arch/arm/dts/ast2500.dtsi
--- uboot/arch/arm/dts/ast2500.dtsi	2020-03-10 12:27:27.389827092 +0800
+++ u-boot.new/arch/arm/dts/ast2500.dtsi	2020-03-10 12:58:57.483037943 +0800
@@ -49,7 +49,25 @@
 		device_type = "memory";
 		reg = <0x80000000 0>;
 	};
+	reserved-memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges;
+
+		gfx_memory: framebuffer {
+			size = <0x01000000>;
+			alignment = <0x01000000>;
+			compatible = "shared-dma-pool";
+			reusable;
+		};
 
+		video_memory: video {
+			size = <0x04000000>;
+			alignment = <0x01000000>;
+			compatible = "shared-dma-pool";
+			no-map;
+		};
+	};
 	ahb {
 		compatible = "simple-bus";
 		#address-cells = <1>;
diff -Naur uboot/oem/ami/bootlogo/bootlogo.h u-boot.new/oem/ami/bootlogo/bootlogo.h
--- uboot/oem/ami/bootlogo/bootlogo.h	1970-01-01 08:00:00.000000000 +0800
+++ u-boot.new/oem/ami/bootlogo/bootlogo.h	2020-03-09 16:20:48.760902100 +0800
@@ -0,0 +1,53 @@
+#ifndef __BOOTLOGO_H__
+#define __BOOTLOGO_H__
+
+#define BOOT_LOGO_TAG		0x494458
+#define BOOT_LOGO_MAGIC		0x4F474F4C
+
+#define MAX_LOGO_WIDTH		800
+#define MAX_LOGO_HEIGHT		600
+#define MAX_LOGO_COLORS		256
+
+#define LOGO_TYPE_CLUT		1
+
+struct boot_logos_t {
+    unsigned int magic; 
+    unsigned int count; //num of logos
+} __attribute__((packed));
+
+struct info_data_t {
+    unsigned int size;
+    unsigned int offset;
+} __attribute__((packed));
+
+struct info_clut_t {
+    unsigned int size;
+    unsigned int offset;
+} __attribute__((packed));
+
+struct checksum_t {
+    unsigned int info;
+    unsigned int data;
+    unsigned int clut;
+} __attribute__((packed));
+
+struct logo_info_t {
+    unsigned int tag;
+    unsigned int index;
+    unsigned int type;
+    unsigned int width;
+    unsigned int height;
+    unsigned int max_color;
+    struct info_data_t data;
+    struct info_clut_t clut;
+    struct checksum_t chksum;
+} __attribute__((packed));
+
+struct color_t {
+    unsigned char red;
+    unsigned char green;
+    unsigned char blue;
+    unsigned char alpha;
+} __attribute__((packed));
+
+#endif
diff -Naur uboot/oem/ami/bootlogo/cmd_bootlogo.c u-boot.new/oem/ami/bootlogo/cmd_bootlogo.c
--- uboot/oem/ami/bootlogo/cmd_bootlogo.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot.new/oem/ami/bootlogo/cmd_bootlogo.c	2020-03-09 16:20:48.756902200 +0800
@@ -0,0 +1,87 @@
+# include <common.h>
+# include <config.h>
+# include <command.h>
+# include <flash.h>
+# include <malloc.h>
+# include <linux/string.h>
+# include "bootlogo.h"
+
+#define ACTION_ADDR	"addr"
+extern unsigned int enable_framebuffer(void);
+int ShowBootLogoByAddress(unsigned int logo_bin_addr, int idx)
+{
+	unsigned int ptr_addr ;
+	struct boot_logos_t *boot_logos = NULL;
+	struct logo_info_t *logo_info = NULL;
+	struct color_t *clut_ptr = NULL;
+	unsigned char *logo_data_ptr = NULL;
+	unsigned int fb_addr = 0;
+	int i;
+	struct color_t clut;
+
+	// Logo binary start address
+	ptr_addr = logo_bin_addr;
+
+	// Get Boot logos header
+	boot_logos = ((struct boot_logos_t *) logo_bin_addr);
+
+	// Get Logo info header
+	ptr_addr += sizeof(struct boot_logos_t);
+
+	// Check idx is valid
+	if ((idx >= boot_logos->count) | (idx < 0))
+	{
+		printf("boot logo idx is not valid:%d \n", idx);
+		return -1;
+	}
+
+	for(i=0;i<boot_logos->count;i++){
+		logo_info = ((struct logo_info_t *)ptr_addr);
+		printf("(%d)idx %d, type %x, w*h (%d x %d), clut[%d: %d], data[%d: %d]\n", boot_logos->count, 
+		logo_info->index, logo_info->type, logo_info->width, logo_info->height, logo_info->clut.offset, logo_info->clut.size, logo_info->data.offset, logo_info->data.size);
+
+		// Get Logo palette
+		ptr_addr += sizeof(struct logo_info_t);
+
+		// Get Logo Data
+		ptr_addr += logo_info->clut.size * sizeof(struct color_t);
+		ptr_addr += logo_info->data.size;
+
+		if(i == idx)
+			break;
+	}
+	printf("\n enabling Frame buffer\n");
+	// Enable Framebuffer device
+	fb_addr = enable_framebuffer();
+	clut_ptr = (struct color_t *)(logo_bin_addr + logo_info->clut.offset);
+	logo_data_ptr = (unsigned char*)(logo_bin_addr + logo_info->data.offset);
+	printf("\n fb_addr = %x\n",fb_addr);
+	// show Logo 
+	for(i=0;i<logo_info->data.size;i++){
+		clut = clut_ptr[logo_data_ptr[i]];
+		*( (unsigned int *) (fb_addr + (i << 2)) ) = (clut.alpha << 24) | (clut.red << 16) | (clut.green << 8) | (clut.blue << 0);
+	}
+
+	return 0;
+}
+
+/* U-boot's cmd function to show boot logo */
+int do_bootlogo (cmd_tbl_t *cmdtp, int flag , int argc, char * const argv[])
+{
+	int ret = -1;
+
+	if(!strcasecmp(argv[1], ACTION_ADDR)) {
+		ret = ShowBootLogoByAddress(simple_strtoul(argv[2], NULL, 16), simple_strtoul(argv[3], NULL, 10));
+	}
+
+	return ret;
+}
+
+static char help_text[] = 
+	"addr [Address of bootlogo binary] [image idx of bootlogo] - show logo from address.\n";
+
+U_BOOT_CMD(
+	bootlogo,	4,	0,	do_bootlogo,
+	"Show boot logo from address", help_text
+);
+
diff -Naur uboot/oem/ami/bootlogo/Makefile u-boot.new/oem/ami/bootlogo/Makefile
--- uboot/oem/ami/bootlogo/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ u-boot.new/oem/ami/bootlogo/Makefile	2020-03-09 16:31:23.041624700 +0800
@@ -0,0 +1,21 @@
+#
+# (C) Copyright 2013 
+# American Megatrends Inc
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+obj-y			+= cmd_bootlogo.o #bootlogocore.o 
+
diff -Naur uboot/oem/ami/fmh/ast_fb.c u-boot.new/oem/ami/fmh/ast_fb.c
--- uboot/oem/ami/fmh/ast_fb.c	1970-01-01 08:00:00.000000000 +0800
+++ u-boot.new/oem/ami/fmh/ast_fb.c	2020-03-09 16:23:58.624901100 +0800
@@ -0,0 +1,79 @@
+#include <common.h>
+
+#ifdef CONFIG_BOOTLOGO_SUPPORT
+#include <malloc.h>
+#include <miiphy.h>
+#include <net.h>
+
+#include "soc_hw.h"
+
+#ifdef CONFIG_ASPEED_AST2500
+unsigned int enable_framebuffer(void)
+{
+        /* System Control Unit (SCU) */
+        *(unsigned long *)(SCU_KEY_CONTROL_REG) = 0x1688A8A8;
+        *(unsigned long *)(SCU_CLK_SELECT_REG) &= ~((3 << 2) | (7 << 28) | (1 << 31));
+		// SPEC for SCU08[8] is error, we should set 10 to SCU08[8] when use 40MHz from USB2.0 port1 PHY.
+		*(unsigned long *)(SCU_CLK_SELECT_REG) &= ~(1 << 8);
+        *(unsigned long *)(SCU_CLK_STOP_REG) &= ~( (1 << 0) | (1 << 3) | (1<<10));
+        udelay(10000);
+        *(unsigned long *)(SCU_SYS_RESET_REG) |= (1 << 6);
+        udelay(10000);
+        *(unsigned long *)(SCU_SYS_RESET_REG) &= ~((1 << 6) | (1 << 13));udelay(10000);
+        *(unsigned long *)(SCU_MISC_CONTROL_REG) &= ~(0x01 << 4);udelay(10000);
+        *(unsigned long *)(SCU_MISC_CONTROL_REG) |= ((0x1 << 16) | (1 << 18) | (0x01 << 7));udelay(10000);
+        *(unsigned long *)(SCU_SYS_RESET_CTL_REG2) &= ~(1 << 5);udelay(10000);
+        *(unsigned long *)(SCU_KEY_CONTROL_REG) = 0x00000000;
+
+        /* Graphics Display Controller - (800x600, 32bpp, 60Hz) */
+        *(unsigned long *)(0x1E6E6000 + 0x6C) = 0x0;   	        // CRT Video PLL Setting
+        *(unsigned long *)(0x1E6E6000 + 0x70) = 0x031F041f;     // CRT Horizontal Total & Display Enable End
+        *(unsigned long *)(0x1E6E6000 + 0x74) = 0x03C70347;     // CRT Horizontal Retrace Start & End 
+        *(unsigned long *)(0x1E6E6000 + 0x78) = 0x02570273;     // CRT Vertical Total & Display Enable End
+        *(unsigned long *)(0x1E6E6000 + 0x7C) = 0x025C0258;     // CRT Vertical Retrace Start & End
+        *(unsigned long *)(0x1E6E6000 + 0x84) = 0x01900C80;//0x00000C80;     // CRT Display Offset & Terminal Count
+        *(unsigned long *)(0x1E6E6000 + 0x80) = CONFIG_DISPLAY_ADDRESS; // CRT Display Starting Address
+        *(unsigned long *)(0x1E6E6000 + 0x88) = 0x00003C24;     // CRT Threshold
+        *(unsigned long *)(0x1E6E6000 + 0x64) = 0x00000081;     // CRT Control-2
+        *(unsigned long *)(0x1E6E6000 + 0x60) = 0x00000101;     // CRT Control-1
+        udelay(10000);
+
+	return CONFIG_DISPLAY_ADDRESS;
+}
+#else
+unsigned int enable_framebuffer(void)
+{
+
+        /* System Control Unit (SCU) */
+        *(unsigned long *)(SCU_KEY_CONTROL_REG) = 0x1688A8A8;
+        *(unsigned long *)(SCU_CLK_STOP_REG) &= ~(0x00000402);
+        udelay(10000);
+
+        *(unsigned long *)(SCU_MISC_CONTROL_REG) &= ~(0x00070098);
+        *(unsigned long *)(SCU_MISC_CONTROL_REG) |= 0x00050080;
+        *(unsigned long *)(SCU_CLK_STOP_REG) &= ~(0x00000400);
+        udelay(10000);
+
+        *(unsigned long *)(SCU_SYS_RESET_REG) &= ~(0x00002080);
+        udelay(10000);
+
+        *(unsigned long *)(SCU_KEY_CONTROL_REG) = 0x00000000;
+
+        /* Graphics Display Controller - (800x600, 32bpp, 60Hz) */
+        *(unsigned long *)(0x1E6E6000 + 0x6C) = 0x00046C50;     // CRT Video PLL Setting
+        *(unsigned long *)(0x1E6E6000 + 0x70) = 0x031F041F;     // CRT Horizontal Total & Display Enable End
+        *(unsigned long *)(0x1E6E6000 + 0x74) = 0x03C70347;     // CRT Horizontal Retrace Start & End 
+        *(unsigned long *)(0x1E6E6000 + 0x78) = 0x02570273;     // CRT Vertical Total & Display Enable End
+        *(unsigned long *)(0x1E6E6000 + 0x7C) = 0x025C0258;     // CRT Vertical Retrace Start & End
+        *(unsigned long *)(0x1E6E6000 + 0x84) = 0x01900C80;     // CRT Display Offset & Terminal Count
+        *(unsigned long *)(0x1E6E6000 + 0x80) = CONFIG_DISPLAY_ADDRESS; // CRT Display Starting Address
+        *(unsigned long *)(0x1E6E6000 + 0x88) = 0x00001E12;     // CRT Threshold
+        *(unsigned long *)(0x1E6E6000 + 0x64) = 0x00000081;     // CRT Control-2
+        *(unsigned long *)(0x1E6E6000 + 0x60) = 0x00000101;     // CRT Control-1
+        udelay(10000);
+
+	return CONFIG_DISPLAY_ADDRESS;
+}
+#endif
+
+#endif /* CONFIG_BOOTLOGO_SUPPORT */
diff -Naur uboot/oem/ami/fmh/Makefile u-boot.new/oem/ami/fmh/Makefile
--- uboot/oem/ami/fmh/Makefile	2020-03-10 12:27:25.197888985 +0800
+++ u-boot.new/oem/ami/fmh/Makefile	2020-03-10 12:59:17.780202936 +0800
@@ -23,4 +23,7 @@
 ifdef CONFIG_SPX_FEATURE_SECURE_BOOT_SUPPORT
 obj-y                           += hrotcore.o
 endif
+ifdef CONFIG_SPX_FEATURE_GLOBAL_FRAME_BUFFER_SUPPORT
+obj-y                           += ast_fb.o
+endif
 #
diff -Naur uboot/oem/Makefile u-boot.new/oem/Makefile
--- uboot/oem/Makefile	2020-03-10 12:27:25.625876899 +0800
+++ u-boot.new/oem/Makefile	2020-03-10 12:59:30.685985741 +0800
@@ -12,3 +12,6 @@
 obj-y += ami/ipmi/
 obj-y += ami/fwupdate/
 endif
+ifeq ($(CONFIG_SPX_FEATURE_GLOBAL_FRAME_BUFFER_SUPPORT),"YES")
+obj-y += ami/bootlogo/
+endif
