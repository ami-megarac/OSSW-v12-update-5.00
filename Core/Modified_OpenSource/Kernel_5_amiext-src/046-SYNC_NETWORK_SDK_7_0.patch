diff -Naur linux_org/drivers/net/ethernet/faraday/ftgmac100.c linux/drivers/net/ethernet/faraday/ftgmac100.c
--- linux_org/drivers/net/ethernet/faraday/ftgmac100.c	2021-07-05 10:25:53.919044631 +0800
+++ linux/drivers/net/ethernet/faraday/ftgmac100.c	2021-07-05 10:26:24.246142237 +0800
@@ -569,11 +569,7 @@
 	netdev->stats.rx_packets++;
 	netdev->stats.rx_bytes += size;
 
-	/* push packet to protocol stack */
-	if (skb->ip_summed == CHECKSUM_NONE)
-		netif_receive_skb(skb);
-	else
-		napi_gro_receive(&priv->napi, skb);
+	napi_gro_receive(&priv->napi, skb);
 
 	(*processed)++;
 	return true;
@@ -718,6 +714,7 @@
 	struct ftgmac100_txdes *txdes, *first;
 	unsigned int pointer, nfrags, len, i, j;
 	u32 f_ctl_stat, ctl_stat, csum_vlan;
+	u32 wake_napi_bh = 0;
 	dma_addr_t map;
 
 	/* The HW doesn't pad small frames */
@@ -828,8 +825,28 @@
 		smp_mb();
 		if (ftgmac100_tx_buf_avail(priv) >= TX_THRESHOLD)
 			netif_wake_queue(netdev);
+		else
+			wake_napi_bh = 1;		
+	}
+
+	/* When sending UDP packets, we may never receive a packet to activate 
+	 * the NAPI BH. And hence we don't have chance to free the TX data.
+	 * The workaround is to enable FTGMAC100_INT_XPKT_ETH, then the NAPI BH 
+	 * can be woke up in the ISR.
+	*/
+	if ((cpu_to_be16(ETH_P_IP) == skb->protocol) &&
+	    (IPPROTO_UDP == ip_hdr(skb)->protocol)) {
+		wake_napi_bh = 1;
 	}
 
+	if (wake_napi_bh) {
+		u32 ier = ioread32(priv->base + FTGMAC100_OFFSET_IER);			
+			/* IER == FTGMAC100_INT_ALL implies NAPI is not running */
+		if (FTGMAC100_INT_ALL == ier)
+			iowrite32(ier | FTGMAC100_INT_XPKT_ETH,
+				  priv->base + FTGMAC100_OFFSET_IER);
+	}
+	
 	/* Poke transmitter to read the updated TX descriptors */
 	iowrite32(1, priv->base + FTGMAC100_OFFSET_NPTXPD);
 
diff -Naur linux_org/drivers/net/phy/realtek.c linux/drivers/net/phy/realtek.c
--- linux_org/drivers/net/phy/realtek.c	2021-07-05 10:25:53.919044631 +0800
+++ linux/drivers/net/phy/realtek.c	2021-07-05 10:26:24.250142118 +0800
@@ -29,6 +29,8 @@
 #define RTL8211F_INSR				0x1d
 
 #define RTL8211F_TX_DELAY			BIT(8)
+#define RTL8211F_RX_DELAY			BIT(3)
+
 #define RTL8211E_TX_DELAY			BIT(1)
 #define RTL8211E_RX_DELAY			BIT(2)
 #define RTL8211E_MODE_MII_GMII			BIT(3)
@@ -172,38 +174,61 @@
 static int rtl8211f_config_init(struct phy_device *phydev)
 {
 	struct device *dev = &phydev->mdio.dev;
-	u16 val;
+	u16 val_txdly, val_rxdly;
 	int ret;
 
-	/* enable TX-delay for rgmii-{id,txid}, and disable it for rgmii and
-	 * rgmii-rxid. The RX-delay can be enabled by the external RXDLY pin.
-	 */
 	switch (phydev->interface) {
 	case PHY_INTERFACE_MODE_RGMII:
+		val_txdly = 0;
+		val_rxdly = 0;
+		break;
+		
 	case PHY_INTERFACE_MODE_RGMII_RXID:
-		val = 0;
+		val_txdly = 0;
+		val_rxdly = RTL8211F_RX_DELAY;
 		break;
-	case PHY_INTERFACE_MODE_RGMII_ID:
+		
 	case PHY_INTERFACE_MODE_RGMII_TXID:
-		val = RTL8211F_TX_DELAY;
+		val_txdly = RTL8211F_TX_DELAY;
+		val_rxdly = 0;
+		break;
+
+	case PHY_INTERFACE_MODE_RGMII_ID:
+		val_txdly = RTL8211F_TX_DELAY;
+		val_rxdly = RTL8211F_RX_DELAY;
 		break;
 	default: /* the rest of the modes imply leaving delay as is. */
 		return 0;
 	}
 
 	ret = phy_modify_paged_changed(phydev, 0xd08, 0x11, RTL8211F_TX_DELAY,
-				       val);
+				       val_txdly);
 	if (ret < 0) {
 		dev_err(dev, "Failed to update the TX delay register\n");
 		return ret;
 	} else if (ret) {
 		dev_dbg(dev,
 			"%s 2ns TX delay (and changing the value from pin-strapping RXD1 or the bootloader)\n",
-			val ? "Enabling" : "Disabling");
+			val_txdly ? "Enabling" : "Disabling");
 	} else {
 		dev_dbg(dev,
 			"2ns TX delay was already %s (by pin-strapping RXD1 or bootloader configuration)\n",
-			val ? "enabled" : "disabled");
+			val_txdly ? "enabled" : "disabled");
+	}
+
+	ret = phy_modify_paged_changed(phydev, 0xd08, 0x15, RTL8211F_RX_DELAY,
+				       val_rxdly);
+	if (ret < 0) {
+		dev_err(dev, "Failed to update the RX delay register\n");
+		return ret;
+	} else if (ret) {
+		dev_dbg(dev,
+			"%s 2ns RX delay (and changing the value from pin-strapping RXD0 or the bootloader)\n",
+			val_rxdly ? "Enabling" : "Disabling");
+	} else {
+		dev_dbg(dev,
+			"2ns RX delay was already %s (by pin-strapping RXD0 or bootloader configuration)\n",
+			val_rxdly ? "enabled" : "disabled");			
 	}
 
 	return 0;
