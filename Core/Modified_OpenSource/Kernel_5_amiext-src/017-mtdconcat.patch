--- linux-5.4.99/drivers/mtd/concat/Kconfig	2021-03-11 15:33:05.029054845 +0800
+++ linux/drivers/mtd/concat/Kconfig	2021-03-10 15:16:44.453536700 +0800
@@ -0,0 +1,10 @@
+menu "Concat MTD device drivers"
+       depends on MTD!=n
+
+config MTD_CONCAT
+       tristate "Concat MTD device"
+       help
+         This is a vitual MTD driver which creates a concatenated
+		 MTD driver based on the flash devices provided in DTS
+
+endmenu
--- linux-5.4.99/drivers/mtd/concat/Makefile	2021-03-11 15:33:12.608820583 +0800
+++ linux/drivers/mtd/concat/Makefile	2021-03-10 15:16:44.453536700 +0800
@@ -0,0 +1 @@
+obj-$(CONFIG_MTD_CONCAT)   += mtd-concat.o
--- linux-5.4.99/drivers/mtd/concat/mtd-concat.c	2021-03-11 15:33:23.552479903 +0800
+++ linux/drivers/mtd/concat/mtd-concat.c	2021-03-10 15:16:44.453536700 +0800
@@ -0,0 +1,145 @@
+/* SPDX-License-Identifier: GPL-2.0+
+ * Virtual concat MTD device driver
+ *
+ * Copyright (C) 2018 Bernhard Frauendienst
+ * Author: Bernhard Frauendienst, kernel@nospam.obeliks.de
+ */
+
+/* Modified to fit to AMI SPX requirements */
+
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/mtd/concat.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/partitions.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/slab.h>
+
+/*
+ * struct of_mtd_concat - platform device driver data.
+ * @cmtd the final mtd_concat device
+ * @num_devices the number of devices in @devices
+ * @devices points to an array of devices already loaded
+ */
+struct of_mtd_concat 
+{
+       struct mtd_info *cmtd;
+       int num_devices;
+       struct mtd_info **devices;
+};
+
+static int mtd_concat_remove(struct platform_device *pdev)
+{
+       struct of_mtd_concat *info;
+       int i;
+
+       info = platform_get_drvdata(pdev);
+       if (!info)
+               return 0;
+
+       // unset data for when this is called after a probe error
+       platform_set_drvdata(pdev, NULL);
+
+       if (info->cmtd) {
+               mtd_device_unregister(info->cmtd);
+               mtd_concat_destroy(info->cmtd);
+       }
+
+       if (info->devices) {
+               for (i = 0; i < info->num_devices; i++)
+                       put_mtd_device(info->devices[i]);
+       }
+
+       return 0;
+}
+
+static int mtd_concat_probe(struct platform_device *pdev)
+{
+       struct device_node *node = pdev->dev.of_node;
+       struct of_phandle_iterator it;
+       struct of_mtd_concat *info;
+       struct mtd_info *mtd;
+       int err = 0, count;
+
+       count = of_count_phandle_with_args(node, "devices", NULL);
+       if (count <= 0)
+               return -EINVAL;
+
+       info = devm_kzalloc(&pdev->dev, sizeof(*info), GFP_KERNEL);
+       if (!info)
+               return -ENOMEM;
+
+       info->devices = devm_kcalloc(&pdev->dev, count,
+                                    sizeof(*(info->devices)), GFP_KERNEL);
+       if (!info->devices) 
+	   {
+               err = -ENOMEM;
+               goto err_remove;
+       }
+
+       platform_set_drvdata(pdev, info);
+
+       of_for_each_phandle(&it, err, node, "devices", NULL, 0) {
+
+               mtd = get_mtd_device_by_node(it.node);
+               if (IS_ERR(mtd)) {
+                       of_node_put(it.node);
+					 //  AMI: Don't quit of missing banks
+                     //  err = -EPROBE_DEFER;
+                     //  goto err_remove;
+					   continue;	
+               }
+
+               info->devices[info->num_devices++] = mtd;
+       }
+
+       info->cmtd = mtd_concat_create(info->devices, info->num_devices,
+                                      dev_name(&pdev->dev));
+       if (!info->cmtd) {
+               err = -ENXIO;
+               goto err_remove;
+       }
+
+	   // AMI: After Concat, remove the all original mtd.
+	   for(count=0;count<info->num_devices;count++)
+	   {
+            put_mtd_device(info->devices[count]);
+			mtd_device_unregister(info->devices[count]);
+       }
+
+       info->cmtd->dev.parent = &pdev->dev;
+       mtd_set_of_node(info->cmtd, node);
+       mtd_device_register(info->cmtd, NULL, 0);
+
+
+       return 0;
+
+err_remove:
+       mtd_concat_remove(pdev);
+
+       return err;
+}
+
+static const struct of_device_id mtd_concat_of_match[] = {
+       { .compatible = "mtd-concat", },
+       {} 
+};
+
+MODULE_DEVICE_TABLE(of, mtd_concat_of_match);
+
+static struct platform_driver mtd_concat_driver = 
+{
+       .probe = mtd_concat_probe,
+       .remove = mtd_concat_remove,
+       .driver  = {
+               .name   = "mtd-concat",
+               .of_match_table = mtd_concat_of_match,
+       },
+};
+
+module_platform_driver(mtd_concat_driver);
+
+MODULE_LICENSE("GPL v2");
+MODULE_AUTHOR("Bernhard Frauendienst <kernel@nospam.obeliks.de>");
+MODULE_DESCRIPTION("Ccat MTD device driver");
--- linux-5.4.99/drivers/mtd/Kconfig	2021-02-17 17:35:20.000000000 +0800
+++ linux/drivers/mtd/Kconfig	2021-03-11 15:30:11.373989245 +0800
@@ -209,4 +211,6 @@
 
 source "drivers/mtd/hyperbus/Kconfig"
 
+source "drivers/mtd/concat/Kconfig"
+
 endif # MTD
--- linux-5.4.99/drivers/mtd/Makefile	2021-03-11 15:44:12.920765925 +0800
+++ linux/drivers/mtd/Makefile	2021-03-11 15:30:23.005687652 +0800
@@ -31,3 +31,5 @@
 obj-$(CONFIG_MTD_SPI_NOR)	+= spi-nor/
 obj-$(CONFIG_MTD_UBI)		+= ubi/
 obj-$(CONFIG_MTD_HYPERBUS)	+= hyperbus/
+obj-$(CONFIG_MTD_CONCAT)	+= concat/
+
--- linux-5.4.99/drivers/mtd/mtdcore.c	2021-02-17 17:35:20.000000000 +0800
+++ linux/drivers/mtd/mtdcore.c	2021-03-11 15:31:11.468383062 +0800
@@ -1039,6 +1039,44 @@
 }
 EXPORT_SYMBOL_GPL(get_mtd_device_nm);
 
+/**
+ *	get_mtd_device_by_node - obtain a validated handle for an MTD device
+ *	by of_node
+ *	@of_node: OF node of MTD device to open
+ *
+ *	This function returns an MTD device structure in case of success,
+ *	an error code otherwise.
+ */
+struct mtd_info *get_mtd_device_by_node(const struct device_node *of_node)
+{
+	struct mtd_info *mtd;
+	bool found = false;
+	int ret;
+
+	mutex_lock(&mtd_table_mutex);
+
+	mtd_for_each_device(mtd) {
+		if (of_node == mtd->dev.of_node) {
+			found = true;
+			break;
+		}
+	}
+
+	if (found)
+		ret = __get_mtd_device(mtd);
+
+	mutex_unlock(&mtd_table_mutex);
+
+	if (!found)
+		return ERR_PTR(-ENODEV);
+
+	if (ret)
+		return ERR_PTR(ret);
+
+	return mtd;
+}
+EXPORT_SYMBOL_GPL(get_mtd_device_by_node);
+
 void put_mtd_device(struct mtd_info *mtd)
 {
 	mutex_lock(&mtd_table_mutex);
--- linux-5.4.99/include/linux/mtd/mtd.h	2021-02-17 17:35:20.000000000 +0800
+++ linux/include/linux/mtd/mtd.h	2021-03-11 15:31:47.135376463 +0800
@@ -568,6 +568,8 @@
 extern int __get_mtd_device(struct mtd_info *mtd);
 extern void __put_mtd_device(struct mtd_info *mtd);
 extern struct mtd_info *get_mtd_device_nm(const char *name);
+extern struct mtd_info *get_mtd_device_by_node(
+		const struct device_node *of_node);
 extern void put_mtd_device(struct mtd_info *mtd);
 
 
